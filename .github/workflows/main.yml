name: calculate-ci-job
on:  
  push:
    branches-ignore: [ master ]
  pull_request:   
    branches-ignore: [ master ]
  schedule: 
    - cron:  '0 1 * * *'
       
jobs: 
  build-jdk8:
    runs-on: ${{ matrix.os }}
    strategy:
     max-parallel: 3
     fail-fast: false
     #GitHub-hosted runners, possible to add: windows-latest
     matrix:
       os: [ubuntu-latest]
          
    name: calculate-ci-job
    steps:
    - name: Checkout
      uses: actions/checkout@v1
         
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v1
      env:
        JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}
        M2_HOME: /usr/local/apache-maven/apache-maven-3.6.3 
        
    - name: Ping JFrog CLI
      run: jfrog rt ping

    - name: Set Environment Variables
      run: |
        echo "::set-env name=repository::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        echo $repository

    # if pushed from a feature branch, should create a proper repository in artifactory for that  
    - name: Feature Branch Repository Creation
      run: |
        jfrog rt rc templates/local-repo-template.json --vars key1=$repository
        jfrog rt rc templates/virtual-repo-template.json --vars key1=$repository

    - if: always()
      name: Feature Branch Repository Update
      run: |
        echo "::set-env name=repository::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        jfrog rt mvnc --server-id-resolve=tal-personal-arti --server-id-deploy=tal-personal-arti --repo-resolve-releases=auto-cli-virtual-$repository --repo-resolve-snapshots=auto-cli-virtual-$repository --repo-deploy-releases=auto-cli-virtual-$repository --repo-deploy-snapshots=auto-cli-virtual-$repository

    # if pushed from a master branch, should delete the proper repository in artifactory
    - if: always()
      name: Feature Branch Repository Deletion
      run: |
        # Extract all the repositories & Filter the repositories created automatically by the CI process
        jfrog rt curl -XGET /api/repositories | jq '[.[] | .key | select(test("auto-cli"))]' > deletion/auto_created_repositories.json

        # Iterate over all the repositories, delete those by the latest file that was modified
        #jq -c '.[]' deletion/auto_created_repositories.json | while read i; do
          # If latest modified file was > 1 day => DELETE the repository
          if jfrog rt s --spec deletion/repositories-spec.json --spec-vars='key1="auto-cli-virtual-lirans-feature"' | jq '.[] | .created | . > "2020-06-25"'; then
             echo "Deleting the repository, too old to keep in Artifactory"
          else
             echo "Skipping Repository deletion - repository is still relevant"
          fi
        #done

        jq -c '.[]' deletion/auto_created_repositories.json | while read i; do
          echo $i
        done
    
    - if: always()
      name: Build & Deploy
      run: jfrog rt mvn clean install -f maths/pom.xml
        
    - if: always()
      name: Publish Build Information
      run: |
        # Collect environment variables for the build
        jfrog rt bce
        # Collect VCS details from git and add them to the build
        jfrog rt bag
        # Publish build info
        jfrog rt bp       
        
    - if: always()
      name: Xray Scan
      run: |
        jfrog rt bs
